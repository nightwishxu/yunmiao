<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:p="http://www.springframework.org/schema/p" 
		xmlns:aop="http://www.springframework.org/schema/aop" 
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:tx="http://www.springframework.org/schema/tx" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
							http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
							http://www.springframework.org/schema/aop 
							http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
							http://www.springframework.org/schema/context 
							http://www.springframework.org/schema/context/spring-context-4.1.xsd 
							http://www.springframework.org/schema/tx 
							http://www.springframework.org/schema/tx/spring-tx-4.1.xsd ">
						
	<!-- 配置文件读入 ,多个用逗号隔开 -->
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
		
	<!-- dataSource 配置
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy"
		p:targetDataSource-ref="dynamicDataSource" />
		 -->
	<!-- dataSource 多数据源支持
	<bean id="dynamicDataSource" class="com.base.support.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="dataSource" value-ref="dataSourceJDBC" />
			</map>
		</property>
	</bean>
 -->
	<!-- mysql数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />

		<!-- initialSize初始化连接数目 --> 
		<property name="initialSize" value="10" />
		<!-- minIdle连接池中最少空闲minIdle个连接 -->
		<property name="minIdle" value="10" />
		<!-- maxActive连接池支持的最大连接数 --> 
		<property name="maxActive" value="100" />
		
		<!-- maxWait连接池中连接用完时，新的请求等待时间，毫秒 -->
        <property name="maxWait" value="60000" />
        
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		<!-- logAbandoned连接池收回空闲的活动连接时是否打印消息 -->
	  	<property name="logAbandoned" value="true" /> 
	  	<!-- removeAbandoned是否清理 -->
	  	<property name="removeAbandoned" value="true" /> 
	  	<!-- removeAbandonedTimeout针对未被close的活动连接 -->
	 	<property name="removeAbandonedTimeout" value="1800" /> 
		
		<!-- 配置监控统计拦截的filters -->
        <property name="filters" value="wall,stat" /> 
	</bean>
	
    <!-- Mybatis 配置 -->  
    <!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">   -->
    <bean id="sqlSessionFactory" class="com.base.mybatis.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" /> 
        <property name="configLocation" value="classpath:spring/ibatisConfig.xml" /> 
        <property name="mapperLocations" value="classpath*:com/**/**/mapper/*.xml" /> 
    </bean>  
    <!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.*.dao,com.*.daoEx" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean> 
	
	<bean class="com.base.mybatis.spring.MybatisMapperRefresh">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="mapperLocations" value="classpath*:com/**/**/mapper/*.xml"/>
        <constructor-arg name="delaySeconds" value="10"/>
        <constructor-arg name="sleepSeconds" value="20"/>
        <constructor-arg name="enabled" value="${mysql.refresh}"/>
    </bean>
    
    <!-- spring jdbc -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>
	<bean id="nativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"
		lazy-init="true" />

	<!-- 配置事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<aop:aspectj-autoproxy />
	
	<aop:config>
		<aop:advisor pointcut="execution(* com.*.service.*Service.*(..))" advice-ref="txAdviceService" />
	</aop:config>
	
	<aop:config>
		<aop:advisor pointcut="execution(* com.api.action.*.*(..))" advice-ref="txAdviceMobile" />
	</aop:config>

	<tx:advice id="txAdviceService">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="search*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Throwable"/>
		</tx:attributes>
	</tx:advice>
	
	<tx:advice id="txAdviceMobile">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="Throwable"/>
		</tx:attributes>
	</tx:advice>
</beans>
	